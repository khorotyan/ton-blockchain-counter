#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

;;; If a function has inline specifier, its code is actually substituted in every place where the function is called
(int, slice, slice) load_data() inline {
    ;;; Read existing data from storage
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter_value
        ds~load_msg_addr(), ;; the most recent sender
        ds~load_msg_addr() ;; owner_address
    );
}

() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
    ;;; set_data function accepts and stores a Cell
    ;;; If we want to store more data that fits into a Cell, we can easily write a "link" 
    ;;;   to other Cell inside of the first one. Such link is called ref. We can write up to 4 refs into a Cell.
    set_data(begin_cell()
    .store_uint(counter_value, 32) ;; counter_value
    .store_slice(recent_sender) ;; the most recent sender
    .store_slice(owner_address) ;; owner_address
    .end_cell());
}

;;; msg_value - this parameter is telling us how many TON coin (or grams) are received with this message
;;; in_msg - this is a complete message that we've received, with all the information about who sent it etc. The message body is stored as a Cell on the TVM, so there is one whole Cell dedicated to our message with all of it's data
;;; in_msg_body - this is an actual "readable" part of the message that we received. It is part of the Cell, it indicates the "address" from which part of the cell we should start reading if we want to read this slice parameter
() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    ;;; slice is an "address", a pointer
    ;;; So when we parse - we parse starting from some place. In this case the begin_parse() is telling us
    ;;;   from where we should start parsing it gives us the pointer to a very first bit of the in_msg Cell

    ;;; Once we are going to call some more ~load_{*} on the cs variable, 
    ;;;   we will actually continue parsing from the place the previous ~load_{*} finished
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4); ;; We read the first 4 bits, then the pointer will be on the 5th bit
    slice sender_address = cs~load_msg_addr();

    ;;; initially store a 32-bit integer 1 for incrementing
    int op = in_msg_body~load_uint(32);
	
    var (counter_value, recent_sender, owner_address) = load_data();
	
    if (op == 1) {
        int increment_by = in_msg_body~load_uint(32);
        save_data(counter_value + increment_by, sender_address, owner_address);
        return();
    }

    if (op == 2) {
        return();
    }

    if (op == 3) {
        throw_unless(103, equal_slice_bits(sender_address, owner_address));

        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);

        ;;; We can't withdraw more than the balance minus the minimum amount of TONs required for storage
        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

        int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)
        
        ;;; We are going to send a message to the sender with the return value
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        ;;; send_raw_message function sends a message to the network
        send_raw_message(msg.end_cell(), msg_mode);

        return();
    }

    throw(777);
}

;;; Let anybody to read the latest sender's address. To access the data ouside of TVM
(int, slice, slice) get_contract_storage_data() method_id {
    var (counter_value, recent_sender, owner_address) = load_data();
    return (
        counter_value,
        recent_sender,
        owner_address
    );
}

;;; Let anybody to read the balance of the contract. To access the data ouside of TVM
int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}